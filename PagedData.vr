Using System
Using System.Text
Using System.Collections.Generic

DclNamespace ASNA.DataGateHelper

BegClass PagedData
    DclConst SUCCESS Value(0) 

    DclProp ReturnedSQLCode Type(*String) 
    DclProp ReturnedSQLState Type(*String)  
    DclProp MessageText Type(*String) 

    DclProp UniqueObjectId Type(*String) Access(*Public) 
    DclProp LibraryName Type(*String)  Access(*Public) 
    
    DclProp RowsRead Type(*Integer4) Access(*Public) 
    
    DclFld iSql Type(IBMiSqlPage)  
    
    BegConstructor Access(*Public) 
        DclSrParm DGDB Type(ASNA.VisualRPG.Runtime.DataBase) 
        DclSrParm LibraryName Type(*String) 
        DclSrParm ProgramLibrary Type(*String) 
        DclSrParm RPGProgramToCall Type(*String) 

        *This.LibraryName = LibraryName 
        *This.iSql = *New IBMiSqlPage(DGDB, ProgramLibrary, RPGProgramToCall) 
    EndConstructor 

    BegSr WritePage Access(*Public) 
        DclSrParm LibraryName Type(*String)
        DclSrParm PageSize Type(*Integer4) 
        DclSrParm Page Type(*Integer4) 
        DclSrParm Sql Type(*String) 

        DclFld ErrorCode Type(*Integer4) 
        DclFld Offset Type(*Integer4) 
 
        *This.UniqueObjectId = Utility.GenerateUniqueObjectId() 

        Offset = (PageSize * Page) - PageSize
        Sql = Sql.Replace('{libraryName}', LibraryName)
        Sql = Sql.Replace('{uniqueObjectId}', *This.UniqueObjectId)
        
        // Read one more row than requested. The presence of the +1 row will 
        // later be used to determine if more records are avaiable.
        Sql = Sql.Replace('{limit}', (PageSize + 1).ToString())
        Sql = Sql.Replace('{offset}', Offset.ToString())

        ErrorCode = ISql.Call(Sql)
        *This.ReturnedSQLCode = ISql.ReturnedSQLCode
        *This.ReturnedSQLState = ISql.ReturnedSQLState 
        *This.MessageText = ISql.MessageText.Trim() 
        
        If ErrorCode <> SUCCESS
          //  *This.AssignSQLInfo()
            Throw *New ApplicationException(String.Format("ERROR calling IBM i program. SQLCode={0} SQLState={1} Message={2}", +
                                                          *This.ReturnedSQLCode, *This.ReturnedSQLState, *This.MessageText)) 
            LeaveSr
        EndIf

        *This.RowsRead = iSql.RowsCount
        //*This.AssignSQLInfo()
     EndSr

//    BegSr AssignSQLInfo Access(*Public) 
//        *This.ReturnedSQLCode = ISql.ReturnedSQLCode
//        *This.ReturnedSQLState = ISql.ReturnedSQLState 
//        *This.MessageText = ISql.MessageText.Trim() 
//    EndSr

    BegFunc PerformPageQuery Type(PageCargo) Access(*Public) Shared(*Yes)   
        DclSrParm DGDB Type(ASNA.VisualRPG.Runtime.DataBase) 
        DclSrParm TargetLibrary Type(*String) 
        DclSrParm Sql Type(*String) 
        DclSrParm PageSize Type(*Integer4) 
        DclSrParm Page Type(*Integer4) 
        DclSrparm ProgramLibrary Type(*String) 
        DclSrparm RPGProgramToCall Type(*String) 
        
        DclFld pd Type(PagedData) 
        
        pd = *New PagedData(DGDB, TargetLibrary, ProgramLibrary, RPGProgramToCall) 

        pd.WritePage(TargetLibrary, PageSize, Page, Sql) 

        LeaveSr *New PageCargo(pd.RowsRead, pd.UniqueObjectId)
    EndFunc 










EndClass
